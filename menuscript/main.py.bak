#!/usr/bin/env python3
"""
menuscript main entrypoint.

- Default: launch interactive UI
- Subcommand: `menuscript migrate` performs one-time migration from legacy JSON history
  to SQLite DB, then deletes the old JSON file (no backup).
"""
import sys
from pathlib import Path

from .ui import run_menu_loop
from .storage.db import init_db, import_json_history_to_db
from .utils import HISTORY_FILE

def _cmd_migrate():
    """Manual migration: import legacy history.json into DB, then delete history.json."""
    init_db()
    imported = import_json_history_to_db()  # imports if file exists; 0 otherwise
    # Delete legacy JSON history (no backup per user choice C3)
    try:
        Path(HISTORY_FILE).unlink(missing_ok=True)  # Python 3.8+: ignore if missing
    except Exception:
        pass
    # No prints (silent), but return code signals success
    return 0


    main()



def _cmd_plugins(argv):
    """
    plugins subcommand helper, supports:
      menuscript plugins help <tool>
    """
    if not argv or argv[0] in ("-h","--help","help"):
        print("Usage: menuscript plugins help <tool>")
        return 0
    sub = argv[0].lower()
    if sub == "help":
        if len(argv) < 2:
            print("Usage: menuscript plugins help <tool>")
            return 2
        tool = argv[1].lower()
        try:
            from .engine.loader import discover_plugins
            plugins = discover_plugins()
            # find plugin by tool name
            p = plugins.get(tool)
            if not p:
                # fallback: search by attribute
                for v in plugins.values():
                    if getattr(v, "tool", "").lower() == tool or getattr(v, "name","").lower().find(tool) != -1:
                        p = v
                        break
            if not p:
                print("Plugin not found:", tool)
                return 1
            helpdata = getattr(p, "HELP", None)
            if not helpdata:
                print(f"No help metadata for {tool}")
                return 0
            # pretty print H2 help
            print()
            print(helpdata.get("name", tool))
            print("─" * max(10, len(helpdata.get("name", tool))))
            print("Description:")
            for line in helpdata.get("description","").splitlines():
                print("  " + line)
            print()
            print("Usage:")
            print("  " + helpdata.get("usage",""))
            print()
            if helpdata.get("examples"):
                print("Examples:")
                for ex in helpdata.get("examples",[]):
                    print("  " + ex)
                print()
            if helpdata.get("flags"):
                print("Useful Flags:")
                for flag, desc in helpdata.get("flags",[]):
                    print(f"  {flag.ljust(18)} {desc}")
                print()
            if helpdata.get("presets"):
                print("Presets:")
                for i, p in enumerate(helpdata.get("presets",[]), start=1):
                    print(f"  {i}) {p.get('name')} - {p.get('desc')}")
                print()
            return 0
        except Exception as e:
            print("Could not load plugins/help:", e)
            return 2
    else:
        print("Unknown plugins subcommand. Try: help")
        return 2



def main():
    """
    Entry point:
     - if '--version' or '-v' given, print version and branding and exit 0
     - if '--help' or '-h' given, print short CLI help and exit 0
     - if no args provided -> launch interactive TUI run_menu_loop()
     - otherwise fall back to existing CLI routing already implemented below
    """
    argv = sys.argv[1:]

    # handle version flag early
    if '--version' in argv or '-v' in argv:
        # try to get installed package version first
        try:
            import importlib.metadata as md
            ver = md.version('menuscript')
        except Exception:
            # fallback: attempt to read pyproject or default to 'dev'
            ver = 'dev'
        # Print a friendly banner + version
        try:
            print(f"menuscript v{ver}")
            print('by y0d8 & CyberSoul SecurITy ($0u! H@cK3R$)')
        except Exception:
            print(f"menuscript v{ver}")
        return 0

    # help flag
    if '--help' in argv or '-h' in argv:
        print("menuscript — TUI & CLI")
        print()
        print("Usage:")
        print("  menuscript           # interactive menu")
        print("  menuscript --version # show version")
        print("  menuscript jobs ...  # jobs subcommands")
        print("  menuscript plugins help <tool>  # plugin help")
        return 0

    # no args -> interactive TUI
    if not argv:
        try:
            run_menu_loop()
        except KeyboardInterrupt:
            print("\\nInterrupted. Bye.")
        return 0

    # otherwise attempt to dispatch to CLI handlers (existing behavior)
    # common pattern in this file routes to command handlers (e.g., _cmd_jobs)
    cmd = argv[0].lower()
    try:
        if cmd == 'migrate':
            return init_db()
        if cmd == 'config':
            return _cmd_config(argv[1:])
        if cmd == 'jobs':
            return _cmd_jobs(argv[1:])
        if cmd == 'plugins':
            return _cmd_plugins(argv[1:])
        if cmd == 'dev':
            return _cmd_dev(argv[1:])
        # fall back: unknown - show help
        print("Unknown command. Try --help")
        return 2
    except NameError:
        # If certain helper functions are not defined in this runtime, fallback to interactive TUI
        try:
            run_menu_loop()
        except KeyboardInterrupt:
            print("\\nInterrupted. Bye.")
        return 0


if __name__ == '__main__':
    main()
